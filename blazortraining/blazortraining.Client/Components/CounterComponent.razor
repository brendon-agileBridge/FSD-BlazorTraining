@rendermode InteractiveAuto

@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@code{
    [Parameter] public int InitialCount { get; set; } = 0;
    [Parameter] public EventCallback<int> OnCountChanged { get; set; }
    
    
    int? count { get; set; }
    int? oldCount { get; set; }
    
    private string Letter
    {
        get
        {
            var columnString = "";
            decimal columnNumber = count??0;

            while (columnNumber > 0)
            {
                var currentLetterNumber = (columnNumber - 1) % 26;
                var currentLetter = (char)(currentLetterNumber + 65);
                columnString = currentLetter + columnString;
                columnNumber = (columnNumber - (currentLetterNumber + 1)) / 26;
            }

            return columnString;
            
        }
    }
    
    protected override void OnInitialized()
    {
        count ??= InitialCount;
        oldCount ??= InitialCount;
        StateContainer.Increment(count.Value);
    }
    private async Task OnCountChangedF(int value)
    {
        if(value == (oldCount??0)){
            return;
        }
        
        StateContainer.Increment(value - (oldCount??0));

        oldCount = value;
        
        await OnCountChanged.InvokeAsync(value);
    }

    private void Reset()
    {
        count = 0;
        OnCountChangedF(0);
    }

}

Count is @count
<br>
Letter is @Letter
<br>
<input type="number" @bind="count" 
       @bind:event="oninput" 
       @onchange="() => OnCountChangedF(count.Value)"/>
<br>
<button @onclick="Reset">Reset</button>
@StateContainer.Total
<br><br>